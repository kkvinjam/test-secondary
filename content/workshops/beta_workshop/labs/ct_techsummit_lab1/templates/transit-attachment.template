# (c) 2019 Amazon Web Services, Inc. or its affiliates. All Rights Reserved. This AWS Content is provided subject to the terms of the AWS Customer
# Agreement available at https://aws.amazon.com/agreement/ or other written agreement between Customer and Amazon Web Services, Inc.
AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys an AWS Lambda Function that performs a Transit Gateway Attachment and Route creation to a centralized AWS Transit Gateway(RCS-1453)

#Mappings:
#  TransitGatewayId:
#    us-east-1:
#      ID: tgw-region-1
#    us-east-2:
#      ID: tgw-region-2
Parameters:
  pS3BucketSuffix:
    Description: Suffix of S3 for the Lambda code {AWS:Region}-${pS3BucketSuffix}.
    Type: String
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
  pS3Key:
    Description: The Lambda zip file name.
    Default: tgwlambda.zip
    Type: String
    AllowedPattern: ^[a-zA-Z0-9[\\].\/()!:=?#,@+&;{}$-]*
  puseast1TransitGatewayId:
    Description: Transit gateway ID for us-east-1 region (Virginia).
    Type: String
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
  puseast2TransitGatewayId:
    Description: Transit gateway ID for us-east-2 region (Ohio).
    Type: String
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
Metadata: # Metadata Section
  AWS::CloudFormation::Interface:
    ParameterGroups: # Parameter Groups
    - Label: # Lambda Configuration
        default: Configuration
      Parameters: # Label Parameters
#      - pTransitGatewayId
      - pS3BucketSuffix
      - pS3Key
      - puseast1TransitGatewayId
      - puseast2TransitGatewayId
Conditions:
  isRegion1: !Equals [ !Ref 'AWS::Region', "us-east-1" ]
Resources:
  rTransitGatewayAttachmentLambdaRole: # Creates the Lambda role that will update the route CFN template and update the stack
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: RouteTableCFNTemplateUpdate
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*
          - Effect: Allow
            Action:
            - ec2:CreateTransitGatewayVpcAttachment
            - ec2:CreateRoute
            - ec2:DeleteRoute
            Resource: "arn:aws:ec2:*:*:*"
          - Effect: Allow
            Action:
            - ec2:DescribeTransitGateways
            - ec2:DescribeVpcs
            - ec2:DescribeSubnets
            - ec2:DescribeRouteTables
            - iam:ListRoles
            Resource: "*"
          - Effect: Allow
            Action:
            - iam:CreateServiceLinkedRole
            Resource: "arn:aws:iam::*:role/*"

  rLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
      - rTransitGatewayAttachmentLambdaRole
    Properties:
      FunctionName: 'Transit-Gateway-Association'
      Role: !GetAtt rTransitGatewayAttachmentLambdaRole.Arn
      Description: Transit Gateway Association and Route Creation
      Handler: index.lambda_handler
      Timeout: 120
      Environment:
        Variables:
#          transit_gateway_id: !FindInMap
#            - TransitGatewayId
#            - !Ref 'AWS::Region'
#            - ID
          transit_gateway_id:
            - !If [isRegion1, !Ref puseast1TransitGatewayId, !Ref puseast2TransitGatewayId]
      Runtime: python3.6
      Tags:
      - Key: Name
        Value: 'Transit-Gateway-Association'
      Code:
        S3Bucket: !Sub "${AWS::Region}-${pS3BucketSuffix}"
        S3Key: !Ref pS3Key

  rCustomIvoke:
    Type: Custom::CreateAccountLambdaInvoke
    DependsOn: rLambdaFunction
    Properties:
      ServiceToken: !GetAtt [ rLambdaFunction, Arn ]

  # Lambda permission - event rule can trigger evaluation
  rLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn: rLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt 'rLambdaFunction.Arn'
      Principal: events.amazonaws.com
